FROM snowair/debian:php-base

ARG APT_PROXY
ENV PHP_INI_DIR /usr/local/etc/php
RUN mkdir -p $PHP_INI_DIR/conf.d

##<autogenerated>##
##</autogenerated>##

# Apply stack smash protection to functions using local buffers and alloca()
# Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)
# Enable optimization (-O2)
# Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)
# Adds GNU HASH segments to generated executables (this is used if present, and is much faster than sysv hash; in this configuration, sysv hash is also generated)
# https://github.com/docker-library/php/issues/272
ENV PHP_CFLAGS="-fstack-protector-strong -fpic -fpie -O2"
ENV PHP_CPPFLAGS="$PHP_CFLAGS"
ENV PHP_LDFLAGS="-Wl,-O1 -Wl,--hash-style=both -pie"

ENV GPG_KEYS %%GPG_KEYS%%

ENV PHP_VERSION %%PHP_VERSION%%
ENV PHP_URL="%%PHP_URL%%" PHP_ASC_URL="%%PHP_ASC_URL%%"
ENV PHP_SHA256="%%PHP_SHA256%%" PHP_MD5="%%PHP_MD5%%"

RUN set -xe; \
    if [ -n "$HTTP_PROXY" ]; then \
        export http_proxy=$HTTP_PROXY ; \
        export https_proxy=$HTTP_PROXY ; \
        export HTTPS_PROXY=$HTTP_PROXY ; \
	fi; \
	mkdir -p /usr/src; \
	cd /usr/src; \
	\
	wget -O php.tar.xz "$PHP_URL"; \
	\
	if [ -n "$PHP_SHA256" ]; then \
		echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c -; \
	fi; \
	if [ -n "$PHP_MD5" ]; then \
		echo "$PHP_MD5 *php.tar.xz" | md5sum -c -; \
	fi; \
	\
	if [ -n "$PHP_ASC_URL" ]; then \
    	wget -O php.tar.xz.asc "$PHP_ASC_URL"; \
        unset HTTP_PROXY ; \
        unset http_proxy ; \
        unset https_proxy ; \
        unset HTTPS_PROXY ; \
    	export GNUPGHOME="$(mktemp -d)"; \
    	for key in $GPG_KEYS; do \
    		gpg --keyserver ha.pool.sks-keyservers.net --recv-keys "$key"; \
    	done; \
    	gpg --batch --verify php.tar.xz.asc php.tar.xz; \
    	rm -r "$GNUPGHOME"; \
	fi;

COPY docker-php-source /usr/local/bin/
RUN set -xe; \
	if [ -n "$HTTP_PROXY" -a -n "$APT_PROXY"  ]; then \
        apt_http_config="-o Acquire::http::proxy=$HTTP_PROXY" ; \
        apt_https_config="-o Acquire::https::proxy=$HTTP_PROXY" ; \
	fi; \
 	if [ -n "$PHP_EXTRA_BUILD_DEPS" ]; then \
        buildDeps=" \
            $PHP_EXTRA_BUILD_DEPS \
        " ; \
        apt-get update $apt_http_config $apt_https_config && apt-get $apt_http_config $apt_https_config install -y $buildDeps --no-install-recommends && rm -rf /var/lib/apt/lists/* ;\
 	fi; \
	export CFLAGS="$PHP_CFLAGS" \
		CPPFLAGS="$PHP_CPPFLAGS" \
		LDFLAGS="$PHP_LDFLAGS" \
	&& docker-php-source extract \
	&& cd /usr/src/php \
	&& ./configure \
		--with-config-file-path="$PHP_INI_DIR" \
		--with-config-file-scan-dir="$PHP_INI_DIR/conf.d" \
		\
		--disable-cgi \
		\
# --enable-ftp is included here because ftp_ssl_connect() needs ftp to be compiled statically (see https://github.com/docker-library/php/issues/236)
		--enable-ftp \
# --enable-mbstring is included here because otherwise there's no way to get pecl to use it properly (see https://github.com/docker-library/php/issues/195)
		--enable-mbstring \
# --enable-mysqlnd is included here because it's harder to compile after the fact than extensions are (since it's a plugin for several extensions, not an extension in itself)
		--enable-mysqlnd \
		\
        --enable-sockets \
        --with-readline \
		--with-recode \
		--with-curl \
		--with-libedit \
		--with-openssl \
		--with-zlib \
        --with-oci8=shared,instantclient,$OCI_INSTANT_PATH \
        --with-pdo-oci=shared,instantclient,$OCI_INSTANT_PATH,12.1.0.2 \
		\
		$PHP_EXTRA_CONFIGURE_ARGS \
	&& make -j "$(nproc)" \
	&& make install \
	&& { find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true; } \
	&& make clean \
	&& docker-php-source delete \
	\
	&& apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $buildDeps

COPY docker-php-ext-* docker-php-entrypoint /usr/local/bin/

RUN docker-php-ext-configure imap --with-imap --with-imap-ssl --with-kerberos \
    && docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ --enable-gd-native-ttf \
    && docker-php-ext-configure hash --with-mhash \
    && docker-php-ext-install tidy intl wddx xmlrpc  xsl opcache bz2 bcmath calendar dba gd exif gettext imap  mcrypt mysqli pcntl pdo_mysql pdo_pgsql pgsql shmop  sysvsem soap sysvmsg  sysvshm zip

RUN if [ -n "$HTTP_PROXY" ]; then \
        export http_proxy=$HTTP_PROXY ; \
        export https_proxy=$HTTP_PROXY ; \
        export HTTPS_PROXY=$HTTP_PROXY ; \
	fi; \
# php5
    cwd=`pwd` ; \
    modules="event msgpack inotify hprose crypto eio memcached redis solr mongodb xdebug ev igbinary imagick yaf" ;\
    if [ %%PHP_MAIN_VERSION%% -eq 5 ]; then \
        memcached_version="-2.2.0" ; \
        msgpack_version="-0.5.7" ; \
        inotify_version="-0.1.6" ; \
        modules="$modules libevent memcache apc xhprof trace sphinx"; \
	fi; \
    for m in $modules; do \
        url=http://pecl.php.net/get/$m; \
        if [ "$m" = "msgpack" ]; then \
            url=http://pecl.php.net/get/msgpack$msgpack_version; \
        fi; \
        if [ "$m" = "inotify" ]; then \
            url=http://pecl.php.net/get/inotify$inotify_version; \
        fi; \
        if [ "$m" = "memcached" ]; then \
            url=http://pecl.php.net/get/memcached$memcached_version; \
        fi; \
        cd $cwd ; wget -O $m.tgz $url && tar -xf $m.tgz && cd `ls -d $m*/` && phpize && ./configure  && make && make install && docker-php-ext-enable $m ; \
        cd $cwd ; rm -fr $m* ; \
    done; 

RUN if [ -n "$HTTP_PROXY" ]; then \
        export http_proxy=$HTTP_PROXY ; \
        export https_proxy=$HTTP_PROXY ; \
        export HTTPS_PROXY=$HTTP_PROXY ; \
	fi; \
    if [ %%PHP_MAIN_VERSION%% -eq 5 ]; then \
            wget -O cphalcon.zip https://github.com/phalcon/cphalcon/archive/master.zip && unzip cphalcon.zip && cd cphalcon-master/build/php%%PHP_MAIN_VERSION%%/64bits && phpize && ./configure && make && make install && cd - && rm -fr cphalcon*  && docker-php-ext-enable phalcon; \
	fi; \
    if [ %%PHP_MAIN_VERSION%% -eq 7 ]; then \
        wget -O cphalcon.zip https://github.com/phalcon/cphalcon/archive/master.zip && unzip cphalcon.zip && cd cphalcon-master/build/php%%PHP_MAIN_VERSION%%/64bits && phpize && ./configure && make && make install && cd - && rm -fr cphalcon*  && docker-php-ext-enable phalcon; \
	fi; \
    wget -O hiredis.zip https://github.com/redis/hiredis/archive/master.zip && unzip hiredis.zip && cd hiredis-master && make && make install && ldconfig && cd - && rm -fr hiredis* \
    && wget -O swoole.zip https://github.com/swoole/swoole-src/archive/v2.0.7.zip && unzip swoole.zip && cd swoole-src-2.0.7 && phpize \
        && ./configure --enable-sockets --enable-openssl --with-openssl-dir --enable-async-redis --enable-coroutine \
        && make && make install && cd - && rm -fr swoole* \
    && docker-php-ext-enable swoole \
    && curl -sS https://getcomposer.org/installer | php --  &&  mv composer.phar /usr/local/bin/composer && chmod 777 /usr/local/bin/composer
ENTRYPOINT ["docker-php-entrypoint"]
##<autogenerated>##
CMD ["php", "-a"]
##</autogenerated>##
